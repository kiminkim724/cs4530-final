{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Town": {
				"description": "The public-facing model that represents a town. More information about the town\nis available for users who join it.",
				"properties": {
					"friendlyName": {
						"type": "string",
						"description": "The name that users see on the landing page to determine which town to join"
					},
					"townID": {
						"type": "string",
						"description": "An internal ID that is used to uniquely identify each town"
					},
					"currentOccupancy": {
						"type": "number",
						"format": "double",
						"description": "The current number of players in this town"
					},
					"maximumOccupancy": {
						"type": "number",
						"format": "double",
						"description": "The maximum number of players allowed in this town"
					}
				},
				"required": [
					"friendlyName",
					"townID",
					"currentOccupancy",
					"maximumOccupancy"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TownCreateResponse": {
				"description": "Payload that is sent back to a client upon creating a town",
				"properties": {
					"townID": {
						"type": "string",
						"description": "The ID of the newly created town. This ID is needed to join the town."
					},
					"townUpdatePassword": {
						"type": "string",
						"description": "An \"Update password\" for the newly created town. This password is needed to update or delete the town."
					}
				},
				"required": [
					"townID",
					"townUpdatePassword"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TownCreateParams": {
				"description": "Request body that specifies how to create a new town",
				"properties": {
					"friendlyName": {
						"type": "string",
						"description": "A \"Friendly Name\" to use to identify the newly created town, which need not be unique to existing towns names"
					},
					"isPubliclyListed": {
						"type": "boolean",
						"description": "Players will identify towns by either knowing the (randomly generated) town ID, or the town ID will be publicly\nlisted along wiht the friendly name of the town. This behavior can be controlled when creating the town by changing\nthis flag."
					},
					"mapFile": {
						"type": "string",
						"description": "Reserved for future use, currently only used for testing: this parameter can be\nspecified to control which Tiled map file is used for initializing the set of interactable areas\n\nNot currently used on frontend"
					}
				},
				"required": [
					"friendlyName",
					"isPubliclyListed"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InvalidParametersError": {
				"properties": {
					"code": {},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TownSettingsUpdate": {
				"properties": {
					"isPubliclyListed": {
						"type": "boolean"
					},
					"friendlyName": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"ConversationArea": {
				"properties": {
					"id": {
						"type": "string"
					},
					"topic": {
						"type": "string"
					},
					"occupantsByID": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"occupantsByID"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ViewingArea": {
				"properties": {
					"id": {
						"type": "string"
					},
					"video": {
						"type": "string"
					},
					"isPlaying": {
						"type": "boolean"
					},
					"elapsedTimeSec": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"isPlaying",
					"elapsedTimeSec"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KaraokeArea": {
				"properties": {
					"id": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"currentSong": {
						"type": "string"
					},
					"songQueue": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"isSongPlaying": {
						"type": "boolean"
					},
					"elapsedTimeSec": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"songQueue",
					"isSongPlaying",
					"elapsedTimeSec"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SongSchema": {
				"description": "Represents a spotify song database document.",
				"properties": {
					"id": {
						"type": "string"
					},
					"ratings": {
						"properties": {
							"1": {
								"type": "number",
								"format": "double"
							},
							"2": {
								"type": "number",
								"format": "double"
							},
							"3": {
								"type": "number",
								"format": "double"
							},
							"4": {
								"type": "number",
								"format": "double"
							},
							"5": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"5",
							"4",
							"3",
							"2",
							"1"
						],
						"type": "object"
					},
					"reactions": {
						"properties": {
							"dislikes": {
								"type": "number",
								"format": "double"
							},
							"likes": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"dislikes",
							"likes"
						],
						"type": "object"
					}
				},
				"required": [
					"id",
					"ratings",
					"reactions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PosterSessionArea": {
				"properties": {
					"id": {
						"type": "string"
					},
					"stars": {
						"type": "number",
						"format": "double"
					},
					"imageContents": {
						"type": "string"
					},
					"title": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"stars"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "covey-town-townService",
		"version": "1.0.0",
		"description": "Backend service for processing Covey.Town town requests",
		"license": {
			"name": "BSD-3-Clause"
		},
		"contact": {
			"name": "Jonathan Bell"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/towns": {
			"get": {
				"operationId": "ListTowns",
				"responses": {
					"200": {
						"description": "list of towns",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Town"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "List all towns that are set to be publicly available",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "CreateTown",
				"responses": {
					"200": {
						"description": "The ID of the newly created town, and a secret password that will be needed to update or delete this town.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TownCreateResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"townID": "stringID",
											"townUpdatePassword": "secretPassword"
										}
									}
								}
							}
						}
					}
				},
				"description": "Create a new town",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The public-facing information for the new town",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TownCreateParams",
								"description": "The public-facing information for the new town"
							},
							"example": {
								"friendlyName": "My testing town public name",
								"isPubliclyListed": true
							}
						}
					}
				}
			}
		},
		"/towns/{townID}": {
			"patch": {
				"operationId": "UpdateTown",
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Invalid password or update values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Updates an existing town's settings by ID",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "town to update",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "town update password, must match the password returned by createTown",
						"in": "header",
						"name": "X-CoveyTown-Password",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The updated settings",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TownSettingsUpdate",
								"description": "The updated settings"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTown",
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Invalid password or update values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Deletes a town",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town to delete",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "town update password, must match the password returned by createTown",
						"in": "header",
						"name": "X-CoveyTown-Password",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/towns/{townID}/conversationArea": {
			"post": {
				"operationId": "CreateConversationArea",
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Creates a conversation area in a given town",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to create the new conversation area",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "session token of the player making the request, must match the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The new conversation area to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConversationArea",
								"description": "The new conversation area to create"
							}
						}
					}
				}
			}
		},
		"/towns/{townID}/viewingArea": {
			"post": {
				"operationId": "CreateViewingArea",
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Creates a viewing area in a given town",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to create the new viewing area",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "session token of the player making the request, must\nmatch the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The new viewing area to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ViewingArea",
								"description": "The new viewing area to create"
							}
						}
					}
				}
			}
		},
		"/towns/{townID}/karaokeArea": {
			"post": {
				"operationId": "CreateKaraokeArea",
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Creates a karaoke area in a given town",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to create the new karaoke area",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "session token of the player making the request, must\nmatch the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The new karaoke area to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KaraokeArea",
								"description": "The new karaoke area to create"
							}
						}
					}
				}
			}
		},
		"/towns/{townID}/songRating": {
			"patch": {
				"operationId": "UpdateSongRating",
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Updates the current song rating, or add a rating to an unrated song",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to update the karaoke area image contents",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "ID of the song to update",
						"in": "query",
						"name": "songID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "rating",
						"required": true,
						"schema": {
							"type": "number",
							"enum": [
								1,
								2,
								3,
								4,
								5
							]
						}
					},
					{
						"description": "session token of the player making the request, must\nmatch the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/towns/{townID}/songReaction": {
			"patch": {
				"operationId": "UpdateSongReaction",
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Updates the current song rating, or add a rating to an unrated song",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to update the karaoke area image contents",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "ID of the song to update",
						"in": "query",
						"name": "songID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "reaction",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"likes",
								"dislikes"
							]
						}
					},
					{
						"description": "session token of the player making the request, must\nmatch the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/towns/{townID}/songInfo": {
			"get": {
				"operationId": "GetSongInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SongSchema"
								}
							}
						}
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Gets the song information of a given karaoke area in a given town, based on the song id",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to get the karaoke area song information",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "ID of the song to retrieve",
						"in": "query",
						"name": "songID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "session token of the player making the request, must\nmatch the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/towns/{townID}/topSongs": {
			"get": {
				"operationId": "GetTopSongs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SongSchema"
									},
									"type": "array"
								}
							}
						}
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Gets the song information of a given karaoke area in a given town, based on the song id",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to get the karaoke area song information",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "number of songs to retrieve",
						"in": "query",
						"name": "n",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "session token of the player making the request, must\nmatch the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/towns/authorize": {
			"get": {
				"operationId": "SpotifyAuthorize",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "codeChallenge",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/towns/callback": {
			"get": {
				"operationId": "SpotifyCallback",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "codeVerifier",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/towns/{townID}/{karaokeSessionId}/clientCredentials": {
			"get": {
				"operationId": "SpotifyClientCredentials",
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "karaokeSessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/towns/{townID}/posterSessionArea": {
			"post": {
				"operationId": "CreatePosterSessionArea",
				"responses": {
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Creates a poster session area in a given town",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to create the new poster session area",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "session token of the player making the request, must\nmatch the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The new poster session area to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PosterSessionArea",
								"description": "The new poster session area to create"
							}
						}
					}
				}
			}
		},
		"/towns/{townID}/{posterSessionId}/imageContents": {
			"patch": {
				"operationId": "GetPosterAreaImageContents",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Gets the image contents of a given poster session area in a given town",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to get the poster session area image contents",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "interactable ID of the poster session",
						"in": "path",
						"name": "posterSessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "session token of the player making the request, must\nmatch the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/towns/{townID}/{posterSessionId}/incStars": {
			"patch": {
				"operationId": "IncrementPosterAreaStars",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					},
					"400": {
						"description": "Invalid values specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidParametersError"
								}
							}
						}
					}
				},
				"description": "Increment the stars of a given poster session area in a given town, as long as there is\na poster image. Returns the new number of stars.",
				"tags": [
					"towns"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of the town in which to get the poster session area image contents",
						"in": "path",
						"name": "townID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "interactable ID of the poster session",
						"in": "path",
						"name": "posterSessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "session token of the player making the request, must\nmatch the session token returned when the player joined the town",
						"in": "header",
						"name": "X-Session-Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	],
	"tags": [
		{
			"name": "town"
		}
	]
}